#!/usr/bin/env ruby
require 'erb'
require 'rubygems'
require 'pathname'

require_relative '../lib/srl_ruby'
require_relative 'srl2ruby_cli_parser'

class Srl2RubyProg
  DefaultSRLExtension = 'srl'.freeze
  DefDirname = '/templates'.freeze
  DefTemplate = 'base.erb'.freeze
  attr_reader(:cli_options)
  attr_reader(:template)

  def initialize(prog_name, args)
    my_version = SrlRuby::VERSION
    cli = Srl2RubyCLIParser.new(prog_name, my_version)
    @cli_options = cli.parse!(args)
    @template = valid_template
  end

  def run!(file_names)
    if cli_options.include?(:pattern)
      srl_source = cli_options[:pattern]
      process_srl(srl_source)    
    end
    file_names.each do |srl_file|
      fname = validate_filename(srl_file)
      next unless file_exist?(fname)
      puts "Parsing file '#{fname}'"
      srl_source = File.read(fname)
      process_srl(srl_source)
    end
  end

  private

  def valid_template
    t_filepath = nil
    bindir = Gem.bin_path('srl_ruby', File.basename(__FILE__))
    gem_dir = Pathname.new(bindir.sub(/(?<=\/)[^\/]+$/, '')).parent
    def_template_dir = gem_dir.expand_path.to_s + DefDirname

    if cli_options.include?(:template)
      fname = cli_options[:template]
      exists = File.exist?(fname)
      if exists
        t_filepath = Dir.getwd + '/' + fname
      else
        t_filepath = def_template_dir + '/' + fname
        exit(1) unless file_exist?(t_filepath)
      end
    else
      t_filepath = def_template_dir + '/' + DefTemplate
    end
    path = Pathname.new(t_filepath)
    erb_template = ERB.new(path.read, nil, '<>')

    erb_template
  end

  def validate_filename(raw_fname)
    # When necessary add extension to file name
    fname = raw_fname.dup
    basename = File.basename(fname)
    has_extension = basename =~ /(?<=[^.])\.[^.]+$/
    fname << '.' << DefaultSRLExtension unless has_extension

    fname
  end

  def file_exist?(fname)
    exists = File.exist?(fname)
    $stderr.puts "No such file '#{fname}'" unless exists

    exists
  end
  
  def process_srl(srl_source)
    result = SrlRuby.parse(srl_source)
    destination = $stdout
    if cli_options.include?(:output)
      filepath = cli_options[:output]
      destination = File.open(filepath, 'w')
    end
    puts "Writing to file '#{filepath}'" unless destination == $stdout
    destination.puts emit_code(template, srl_source, result)  
  end

  def emit_code(template, srl_source, regexp)
    template.result(binding)
  end
end # class

########################################
# ENTRY POINT
########################################
program = Srl2RubyProg.new(File.basename(__FILE__), ARGV)

# All options from CLI gobbled from ARGV, remains only file name
program.run!(ARGV)
# End of file
